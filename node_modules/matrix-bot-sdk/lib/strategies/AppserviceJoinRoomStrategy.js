"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
class AppserviceJoinRoomStrategy {
    constructor(underlyingStrategy, appservice) {
        this.underlyingStrategy = underlyingStrategy;
        this.appservice = appservice;
    }
    joinRoom(roomIdOrAlias, userId, apiCall) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield apiCall(roomIdOrAlias);
            }
            catch (err) {
                __1.LogService.error("AppserviceJoinRoomStrategy", err);
                if (userId !== this.appservice.botUserId) {
                    const client = this.appservice.botIntent.underlyingClient;
                    const roomId = yield client.resolveRoom(roomIdOrAlias);
                    return client.inviteUser(userId, roomId).then(() => {
                        if (this.underlyingStrategy)
                            return this.underlyingStrategy.joinRoom(roomId, userId, apiCall);
                        else
                            return apiCall(roomId);
                    });
                }
                else if (this.underlyingStrategy) {
                    return this.underlyingStrategy.joinRoom(roomIdOrAlias, userId, apiCall);
                }
                throw err;
            }
        });
    }
}
exports.AppserviceJoinRoomStrategy = AppserviceJoinRoomStrategy;
